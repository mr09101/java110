package bitcamp.java110.cms.dao.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import bitcamp.java110.cms.annotation.Component;
import bitcamp.java110.cms.dao.DaoException;
import bitcamp.java110.cms.dao.ManagerDao;
import bitcamp.java110.cms.domain.Manager;

@Component
public class ManagerJdbcDao implements ManagerDao{
    public int insert(Manager manager) {
        Connection con=null;
        Statement stmt=null;
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con=DriverManager.getConnection("jdbc:mariadb://localhost:3306/studydb",
                    "study","1111");
            //매니저 정보를 입력할 때 p1_memb테이블과 p1_mgr테이블에
            //매니저 정보를 분산 입력 해야 한ㄷ.
            // 두 테이블에 모두 입력 성공할 떄 입력을 완료하도록
            //두 insert 를 한작업 (transaction)으로 묶는다.
            //=>SQL을 서버에 보낸 후 클아이언트가 최종 완료 신로를
            // 보내기 전까지는 처리를 보류하도록 설정한다.
            con.setAutoCommit(false);
            stmt=con.createStatement();
           String sql=("insert into p1_memb(name,email,pwd,tel,cdt)"
                    +"values('"+manager.getName()
                    + "','"+manager.getEmail()
                    + "',password('" +manager.getPassword()
                    + "'),'" + manager.getTel()
                    + "',now())");
           //p1.memb 테이블에 회원 기본 정보를 입력한 후
           //자동으로 생성된 회원번호를 리턴받는다.
           stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
           //insert 를 실행한후 리턴 받은 자동증가 PK값을 꺼내기
           ResultSet autogeneratedKeys =stmt.getGeneratedKeys();
           autogeneratedKeys.next();
           int memberNo = autogeneratedKeys.getInt(1);
           autogeneratedKeys.close();
           //회원 번호로 매니저 테이블에 직위 정보를 입력한다.
           String sql2="insert into p1_mgr(mrno,posi)"
                 + " values(" + memberNo
                 + ",'" + manager.getPosition()
                 + "')";
           stmt.executeUpdate(sql2);
           
           //두 insert가 모두 성공했을 때만 서버에 완료 신호를 보낸다.
           con.commit();
           return 1;
        }catch(Exception e) {
            throw new DaoException(e);
        }finally {
            try{stmt.close();}catch(Exception e) {}
            try{con.close();}catch(Exception e) {}
        }
        
    }

    public List<Manager> findAll() {
        ArrayList<Manager> list=new ArrayList<>();
        Connection con=null;
        Statement stmt=null;
        ResultSet rs=null;
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con=DriverManager.getConnection("jdbc:mariadb://localhost:3306/studydb",
                    "study","1111");
            stmt=con.createStatement();
            rs=stmt.executeQuery("select" +
                    " m.mno," + 
                    " m.name, " + 
                    " m.email," + 
                    " mr.posi " + 
                    " from p1_mgr mr  " + 
                    " inner join p1_memb m on mr.mrno=m.mno");
            while(rs.next()) {
                Manager mgr=new Manager();
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setPosition(rs.getString("posi"));

                list.add(mgr);
            }

        }catch(Exception e) {
            throw new DaoException(e);
        }finally {
            try{rs.close();}catch(Exception e) {}
            try{stmt.close();}catch(Exception e) {}
            try{con.close();}catch(Exception e) {}
        }


        return list;
    }
    public Manager findByEmail(String email) {
        Connection con=null;
        Statement stmt=null;
        ResultSet rs=null;
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con=DriverManager.getConnection("jdbc:mariadb://localhost:3306/studydb",
                    "study","1111");
            stmt=con.createStatement();
            rs=stmt.executeQuery("select" +
                    " m.mno," + 
                    " m.name, " + 
                    " m.email," + 
                    " m.tel,"  +
                    " mr.posi " + 
                    " from p1_mgr mr  " + 
                    " inner join p1_memb m on mr.mrno=m.mno" +
                    "where m.email = '" +email+ "'");
            while(rs.next()) {
                Manager mgr=new Manager();
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setTel(rs.getString("tel"));
                mgr.setPosition(rs.getString("posi"));

                return mgr;
            }
            return null;

        }catch(Exception e) {
            throw new DaoException(e);
        }finally {
            try{rs.close();}catch(Exception e) {}
            try{stmt.close();}catch(Exception e) {}
            try{con.close();}catch(Exception e) {}
        }


    }
    public Manager findByNo(int no) {
        Connection con=null;
        Statement stmt=null;
        ResultSet rs=null;
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con=DriverManager.getConnection("jdbc:mariadb://localhost:3306/studydb",
                    "study","1111");
            stmt = con.createStatement();
            rs = stmt.executeQuery(
                    "select" + 
                    " m.mno," +
                    " m.name," + 
                    " m.email," + 
                    " m.tel," + 
                    " mr.posi" + 
                    " from p1_mgr mr" + 
                    " inner join p1_memb m on mr.mrno = m.mno" +
                    " where m.mno=" + no);
            while(rs.next()) {
                Manager mgr=new Manager();
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setTel(rs.getString("tel"));
                mgr.setPosition(rs.getString("posi"));

                return mgr;
            }
            return null;

        }catch(Exception e) {
            throw new DaoException(e);
        }finally {
            try{rs.close();}catch(Exception e) {}
            try{stmt.close();}catch(Exception e) {}
            try{con.close();}catch(Exception e) {}
        }


    }
    
    public int deleteByNo(int no) {
        Connection con=null;
        Statement stmt=null;
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con=DriverManager.getConnection("jdbc:mariadb://localhost:3306/studydb",
                    "study","1111");
            con.setAutoCommit(false);
            stmt=con.createStatement();
           String sql="delete from p1_mgr where mrno=" + no;
           int count=stmt.executeUpdate(sql);
           if(count==0)
               return 0;
           //회원 번호로 매니저 테이블에 직위 정보를 입력한다.
           String sql2="delete from p1_memb where mno=" + no;
           stmt.executeUpdate(sql2);
           
           //두 insert가 모두 성공했을 때만 서버에 완료 신호를 보낸다.
           con.commit();
           return 1;
        }catch(Exception e) {
            throw new DaoException(e);
        }finally {
            try{stmt.close();}catch(Exception e) {}
            try{con.close();}catch(Exception e) {}
        }
        

    }
}
